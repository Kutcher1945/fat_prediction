import os
import joblib
import onnx
import tf2onnx
import tensorflow as tf
from tensorflow.keras.models import load_model
import skl2onnx
from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
import numpy as np
import pandas as pd

# üöÄ –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è TensorFlow
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º
keras_model_path = "fat_prediction_nn.h5"
sklearn_model_path = "fat_model.pkl"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
print("‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏...")
keras_model = load_model(keras_model_path, compile=False)
sklearn_model = joblib.load(sklearn_model_path)

# Dummy input –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
df = pd.read_csv('synthetic_medical_dataset.csv')
df_encoded = pd.get_dummies(df, columns=['–ü–æ–ª', '–ü—Ä–µ–ø–∞—Ä–∞—Ç', '–î–æ–∑–∏—Ä–æ–≤–∫–∞'])
X = df_encoded.drop(columns=['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'])
sample_input = X[:1].astype(np.float32)

# 1Ô∏è‚É£ TensorFlow SavedModel
print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Keras –º–æ–¥–µ–ª–∏ –≤ TensorFlow SavedModel...")
keras_savedmodel_path = "fat_model_tf"
keras_model.export(keras_savedmodel_path)
print(f"‚úÖ TensorFlow SavedModel —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {keras_savedmodel_path}/")

# 2Ô∏è‚É£ Keras ‚Üí ONNX —Å tf.function (–æ–±—Ö–æ–¥ –±–∞–≥–∞ output_names)
print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Keras –º–æ–¥–µ–ª–∏ –≤ ONNX...")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º tf.function —Å –≤—Ö–æ–¥–Ω–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä–æ–π
spec = (tf.TensorSpec(sample_input.shape, tf.float32, name="input"),)

@tf.function(input_signature=[spec[0]])
def model_func(x):
    return keras_model(x)

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ tf.function
onnx_model, _ = tf2onnx.convert.from_function(model_func, input_signature=spec, opset=13)
onnx_model_path = "fat_model.onnx"

with open(onnx_model_path, "wb") as f:
    f.write(onnx_model.SerializeToString())

print(f"‚úÖ Keras –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ONNX —Ñ–æ—Ä–º–∞—Ç–µ: {onnx_model_path}")

# 3Ô∏è‚É£ Scikit-Learn ‚Üí ONNX
print("üöÄ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RandomForest –º–æ–¥–µ–ª–∏ –≤ ONNX...")
initial_type = [("float_input", FloatTensorType([None, sample_input.shape[1]]))]
sklearn_onnx_model = convert_sklearn(sklearn_model, initial_types=initial_type)
sklearn_onnx_path = "fat_model_rf.onnx"

with open(sklearn_onnx_path, "wb") as f:
    f.write(sklearn_onnx_model.SerializeToString())

print(f"‚úÖ RandomForest –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ ONNX —Ñ–æ—Ä–º–∞—Ç–µ: {sklearn_onnx_path}")

print("üéâ –í—Å–µ –º–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ñ–æ—Ä–º–∞—Ç—ã!")
