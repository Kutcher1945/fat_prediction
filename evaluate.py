import pandas as pd
import joblib
from tensorflow.keras.models import load_model
from sklearn.metrics import mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt
import numpy as np
import os

# üöÄ –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è TensorFlow
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
df = pd.read_csv('synthetic_medical_dataset.csv')

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_encoded = pd.get_dummies(df, columns=['–ü–æ–ª', '–ü—Ä–µ–ø–∞—Ä–∞—Ç', '–î–æ–∑–∏—Ä–æ–≤–∫–∞'])
X = df_encoded.drop(columns=['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'])
y = df_encoded[['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥']]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
rf_model = joblib.load('fat_model.pkl')
nn_model = load_model('fat_prediction_nn.h5', compile=False)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
rf_preds = rf_model.predict(X)
nn_preds = nn_model.predict(X)

# –§—É–Ω–∫—Ü–∏—è –æ—Ü–µ–Ω–∫–∏
def evaluate_model(name, y_true, y_pred):
    mae = mean_absolute_error(y_true, y_pred)
    mse = mean_squared_error(y_true, y_pred)
    print(f"\nüìä {name} Model Evaluation:")
    print(f"MAE: {mae:.3f}")
    print(f"MSE: {mse:.3f}")
    return mae, mse

# –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π
evaluate_model("RandomForest", y, rf_preds)
evaluate_model("Neural Network", y, nn_preds)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def plot_predictions(y_true, y_pred, title, filename):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))

    axs[0].scatter(y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫'], y_pred[:, 0], alpha=0.3)
    axs[0].plot([y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫'].min(), y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫'].max()],
                [y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫'].min(), y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫'].max()],
                color='red', linestyle='--')
    axs[0].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∂–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫')
    axs[0].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∂–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫')
    axs[0].set_title(f'{title}: –†—É–∫–∏')

    axs[1].scatter(y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'], y_pred[:, 1], alpha=0.3)
    axs[1].plot([y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'].min(), y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'].max()],
                [y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'].min(), y_true['–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥'].max()],
                color='red', linestyle='--')
    axs[1].set_xlabel('–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∂–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥')
    axs[1].set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –∂–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥')
    axs[1].set_title(f'{title}: –ù–æ–≥–∏')

    plt.tight_layout()
    plt.savefig(filename)
    plt.close()
    print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
plot_predictions(y, rf_preds, "RandomForest", "randomforest_prediction.png")
plot_predictions(y, nn_preds, "Neural Network", "neural_network_prediction.png")
