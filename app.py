import streamlit as st
import pandas as pd
import numpy as np
import joblib
import tensorflow as tf
import plotly.express as px
import os

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.set_page_config(page_title="Fat Prediction AI", layout="wide")

# üöÄ –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è TensorFlow –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ---
@st.cache_resource
def load_models():
    rf_model = joblib.load("fat_model.pkl")
    keras_model = tf.saved_model.load("fat_model_tf")
    return rf_model, keras_model

rf_model, keras_model = load_models()

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_example():
    df = pd.read_csv('synthetic_medical_dataset.csv')
    df_encoded = pd.get_dummies(df, columns=['–ü–æ–ª', '–ü—Ä–µ–ø–∞—Ä–∞—Ç', '–î–æ–∑–∏—Ä–æ–≤–∫–∞'])
    return df, df_encoded

df_example, df_encoded_example = load_example()

# --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ---
st.title("üíâ Fat Prediction AI ‚Äî –ü—Ä–æ–≥–Ω–æ–∑ –∂–∏—Ä–Ω–æ—Å—Ç–∏ —Ä—É–∫ –∏ –Ω–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤")
st.markdown("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!  
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–∞ –ø–æ —á–∞—Å—Ç—è–º —Ç–µ–ª–∞ ‚Äî **—Ä—É–∫–∏ –∏ –Ω–æ–≥–∏**.

**–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
- –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–ª, –ò–ú–¢, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –∏ –¥—Ä—É–≥–∏–µ).
- –í—ã–±–∏—Ä–∞–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (RandomForest –∏–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å).
- –ü–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è:
- –í—Ä–∞—á–µ–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é.
- –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –∑–¥–æ—Ä–æ–≤—å—è.
- –ü–∞—Ü–∏–µ–Ω—Ç–æ–≤, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö—Å—è –≤–ª–∏—è–Ω–∏–µ–º —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–∞ –≤ —Ç–µ–ª–µ.
""")

# --- –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", expanded=True):
    st.markdown("""
    **–¶–µ–ª—å:**  
    –ù–∞ –æ—Å–Ω–æ–≤–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —É—Ä–æ–≤–Ω–∏ –∂–∏—Ä–Ω–æ—Å—Ç–∏ —Ä—É–∫ –∏ –Ω–æ–≥.

    **–ü–æ–ª—è –¥–∞–Ω–Ω—ã—Ö:**
    - –ü–æ–ª (–ú—É–∂—Å–∫–æ–π / –ñ–µ–Ω—Å–∫–∏–π)
    - –í–æ–∑—Ä–∞—Å—Ç
    - –ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)
    - –ü—Ä–µ–ø–∞—Ä–∞—Ç
    - –î–æ–∑–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    - –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)
    - –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    - –ú–µ—Ç–∞–±–æ–ª–∏–∑–º
    - –¶–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: –ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫, –ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥

    **–ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:**
    """)
    st.dataframe(df_example.head(), use_container_width=True)

# --- –°–∞–π–¥–±–∞—Ä ---
st.sidebar.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
model_choice = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:",
    ["RandomForest (pkl)", "Neural Network (TensorFlow SavedModel)"]
)

# --- –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
st.header("üìã –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞:")

col1, col2 = st.columns(2)

with col1:
    –ü–æ–ª = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
    –í–æ–∑—Ä–∞—Å—Ç = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 18, 90, 30)
    –ò–ú–¢ = st.slider("–ò–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢)", 15.0, 40.0, 22.0)
    –ü—Ä–µ–ø–∞—Ä–∞—Ç = st.selectbox("–ü—Ä–µ–ø–∞—Ä–∞—Ç", df_example["–ü—Ä–µ–ø–∞—Ä–∞—Ç"].unique())

with col2:
    –î–æ–∑–∏—Ä–æ–≤–∫–∞ = st.selectbox("–î–æ–∑–∏—Ä–æ–≤–∫–∞", df_example["–î–æ–∑–∏—Ä–æ–≤–∫–∞"].unique())
    –§–∏–∑–∏—á–µ—Å–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å = st.slider("–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é)", 0, 20, 3)
    –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π_—É—Ä–æ–≤–µ–Ω—å = st.slider("–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", 0.0, 10.0, 5.0)
    –ú–µ—Ç–∞–±–æ–ª–∏–∑–º = st.slider("–ú–µ—Ç–∞–±–æ–ª–∏–∑–º", 0.5, 2.0, 1.0)

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
input_dict = {
    "–í–æ–∑—Ä–∞—Å—Ç": –í–æ–∑—Ä–∞—Å—Ç,
    "–ò–ú–¢": –ò–ú–¢,
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": –§–∏–∑–∏—á–µ—Å–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å,
    "–ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å": –ì–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–π_—É—Ä–æ–≤–µ–Ω—å,
    "–ú–µ—Ç–∞–±–æ–ª–∏–∑–º": –ú–µ—Ç–∞–±–æ–ª–∏–∑–º,
    "–ü–æ–ª_" + –ü–æ–ª: 1,
    "–ü—Ä–µ–ø–∞—Ä–∞—Ç_" + –ü—Ä–µ–ø–∞—Ä–∞—Ç: 1,
    "–î–æ–∑–∏—Ä–æ–≤–∫–∞_" + –î–æ–∑–∏—Ä–æ–≤–∫–∞: 1
}

input_data = pd.DataFrame([input_dict])

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω—É–ª—è–º–∏
for col in df_encoded_example.drop(columns=['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥']).columns:
    if col not in input_data.columns:
        input_data[col] = 0

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
input_data = input_data[df_encoded_example.drop(columns=['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥']).columns]
input_data_np = input_data.astype(np.float32).values

# --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
if st.button("–°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üöÄ"):
    with st.spinner("–ú–æ–¥–µ–ª—å –¥–µ–ª–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑... üîç"):
        if model_choice == "RandomForest (pkl)":
            prediction = rf_model.predict(input_data_np)[0]
        elif model_choice == "Neural Network (TensorFlow SavedModel)":
            prediction = keras_model.signatures["serve"](tf.constant(input_data_np))["output_0"].numpy()[0]
        else:
            prediction = [0, 0]

    # --- –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
    st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:")
    st.markdown(f"""
    - **–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫:** `{prediction[0]:.2f}`
    - **–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥:** `{prediction[1]:.2f}`
    """)
    st.success("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
    parts = ['–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', '–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥']
    values = [prediction[0], prediction[1]]
    df_plot = pd.DataFrame({'–ß–∞—Å—Ç—å —Ç–µ–ª–∞': parts, '–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏': values})

    # --- Bar Chart ---
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞")
    st.markdown("–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞.")
    fig_bar = px.bar(
        df_plot,
        x='–ß–∞—Å—Ç—å —Ç–µ–ª–∞',
        y='–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏',
        color='–ß–∞—Å—Ç—å —Ç–µ–ª–∞',
        text='–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏',
        color_discrete_sequence=['#4BA3C3', '#7BD389']
    )
    fig_bar.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig_bar.update_layout(
        yaxis_title='–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏',
        showlegend=False,
        margin=dict(t=30, b=10),
        height=400
    )
    st.plotly_chart(fig_bar, use_container_width=True)

    # --- Pie Chart ---
    st.subheader("üß© –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ—Å—Ç–∏")
    st.markdown("–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —Ç–µ–ª–∞ –≤ –æ–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑.")
    fig_pie = px.pie(
        df_plot,
        names='–ß–∞—Å—Ç—å —Ç–µ–ª–∞',
        values='–£—Ä–æ–≤–µ–Ω—å –∂–∏—Ä–Ω–æ—Å—Ç–∏',
        color='–ß–∞—Å—Ç—å —Ç–µ–ª–∞',
        color_discrete_sequence=['#4BA3C3', '#7BD389'],
        hole=0.4
    )
    fig_pie.update_traces(textposition='inside', textinfo='percent+label')
    fig_pie.update_layout(margin=dict(t=30, b=10), height=400)
    st.plotly_chart(fig_pie, use_container_width=True)

# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ ---
with st.expander("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", expanded=False):
    st.markdown("### üî• –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    corr = df_encoded_example.corr()
    fig_corr = px.imshow(corr, text_auto=True, aspect="auto", color_continuous_scale="Blues")
    st.plotly_chart(fig_corr, use_container_width=True)

    st.markdown("### üñêÔ∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ—Å—Ç–∏ —Ä—É–∫")
    fig_dist_arms = px.histogram(df_example, x='–ñ–∏—Ä–Ω–æ—Å—Ç—å —Ä—É–∫', nbins=20, color_discrete_sequence=['#4BA3C3'])
    st.plotly_chart(fig_dist_arms, use_container_width=True)

    st.markdown("### ü¶µ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω–æ—Å—Ç–∏ –Ω–æ–≥")
    fig_dist_legs = px.histogram(df_example, x='–ñ–∏—Ä–Ω–æ—Å—Ç—å –Ω–æ–≥', nbins=20, color_discrete_sequence=['#7BD389'])
    st.plotly_chart(fig_dist_legs, use_container_width=True)

# --- –§—É—Ç–µ—Ä ---
st.markdown("---")
st.markdown("¬© 2025 Fat Prediction AI ¬∑ –í–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∂–∏—Ä–∞ üß¨")
